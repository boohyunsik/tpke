// Code generated by command: go run asm.go -out primitivefuncs_amd64.s. DO NOT EDIT.

// func MACWithCarry(a uint64, b uint64, c uint64, carry uint64) (uint64, uint64)
TEXT 路MACWithCarry(SB), $0-48
	MOVQ b+8(FP), CX
	MOVQ c+16(FP), AX

	// Multiply b and c
	MULQ CX
	MOVQ a+0(FP), CX

	// Add a
	ADDQ CX, AX

	// Add to result carry if needed
	ADCQ $0x00, DX
	MOVQ carry+24(FP), CX

	// Add input carry to running result
	ADDQ CX, AX

	// Add to result carry if needed
	ADCQ $0x00, DX
	MOVQ AX, ret+32(FP)
	MOVQ DX, ret1+40(FP)
	RET

// func SubWithBorrow(a uint64, b uint64, borrow uint64) (uint64, uint64)
TEXT 路SubWithBorrow(SB), $0-40
	MOVQ a+0(FP), AX
	MOVQ b+8(FP), CX

	// a = a - b
	XORQ DX, DX
	SUBQ CX, AX

	// Zero out borrow1 and set if overflowed
	SETCS DL
	MOVQ  borrow+16(FP), CX

	// a = a - borrow
	XORQ BX, BX
	SUBQ CX, AX

	// Zero out borrow2 and set if overflowed
	SETCS BL

	// borrow2 = borrow2 | borrow1
	ORQ  DX, BX
	MOVQ AX, ret+24(FP)
	MOVQ BX, ret1+32(FP)
	RET

// func AddWithCarry(a uint64, b uint64, carry uint64) (uint64, uint64)
TEXT 路AddWithCarry(SB), $0-40
	MOVQ a+0(FP), AX
	MOVQ b+8(FP), CX
	MOVQ carry+16(FP), DX

	// Zero out new carry
	XORQ BX, BX

	// Add a + b
	ADDQ CX, AX

	// Add to new carry if needed
	ADCQ $0x00, BX

	// Add old carry
	ADDQ DX, AX

	// Add to new carry if needed
	ADCQ $0x00, BX
	MOVQ AX, ret+24(FP)
	MOVQ BX, ret1+32(FP)
	RET

// func MultiplyFQRepr(a [6]uint64, b [6]uint64) (hi [6]uint64, lo [6]uint64)
TEXT 路MultiplyFQRepr(SB), $0-192
	// carry = 0
	XORQ R10, R10
	MOVQ a_0+0(FP), AX
	MOVQ b_0+48(FP), BX

	// registers[0] = 0
	XORQ CX, CX

	// carry = ((registers[0] + a[0] * b[0] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[0] = (registers[0] + a[0] * b[0] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ CX, AX
	ADCQ $0x00, DX
	ADDQ R10, AX
	ADCQ $0x00, DX
	MOVQ DX, R10
	MOVQ AX, CX
	MOVQ a_0+0(FP), AX
	MOVQ b_1+56(FP), BX

	// registers[1] = 0
	XORQ BP, BP

	// carry = ((registers[1] + a[0] * b[1] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[1] = (registers[1] + a[0] * b[1] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ BP, AX
	ADCQ $0x00, DX
	ADDQ R10, AX
	ADCQ $0x00, DX
	MOVQ DX, R10
	MOVQ AX, BP
	MOVQ a_0+0(FP), AX
	MOVQ b_2+64(FP), BX

	// registers[2] = 0
	XORQ SI, SI

	// carry = ((registers[2] + a[0] * b[2] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[2] = (registers[2] + a[0] * b[2] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ SI, AX
	ADCQ $0x00, DX
	ADDQ R10, AX
	ADCQ $0x00, DX
	MOVQ DX, R10
	MOVQ AX, SI
	MOVQ a_0+0(FP), AX
	MOVQ b_3+72(FP), BX

	// registers[3] = 0
	XORQ DI, DI

	// carry = ((registers[3] + a[0] * b[3] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[3] = (registers[3] + a[0] * b[3] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ DI, AX
	ADCQ $0x00, DX
	ADDQ R10, AX
	ADCQ $0x00, DX
	MOVQ DX, R10
	MOVQ AX, DI
	MOVQ a_0+0(FP), AX
	MOVQ b_4+80(FP), BX

	// registers[4] = 0
	XORQ R8, R8

	// carry = ((registers[4] + a[0] * b[4] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[4] = (registers[4] + a[0] * b[4] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R8, AX
	ADCQ $0x00, DX
	ADDQ R10, AX
	ADCQ $0x00, DX
	MOVQ DX, R10
	MOVQ AX, R8
	MOVQ a_0+0(FP), AX
	MOVQ b_5+88(FP), BX

	// registers[5] = 0
	XORQ R9, R9

	// carry = ((registers[5] + a[0] * b[5] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[5] = (registers[5] + a[0] * b[5] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R9, AX
	ADCQ $0x00, DX
	ADDQ R10, AX
	ADCQ $0x00, DX
	MOVQ DX, R10
	MOVQ AX, R9

	// registers[6] = carry
	MOVQ R10, R10

	// carry = 0
	XORQ R11, R11
	MOVQ a_1+8(FP), AX
	MOVQ b_0+48(FP), BX

	// carry = ((registers[1] + a[1] * b[0] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[1] = (registers[1] + a[1] * b[0] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ BP, AX
	ADCQ $0x00, DX
	ADDQ R11, AX
	ADCQ $0x00, DX
	MOVQ DX, R11
	MOVQ AX, BP
	MOVQ a_1+8(FP), AX
	MOVQ b_1+56(FP), BX

	// carry = ((registers[2] + a[1] * b[1] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[2] = (registers[2] + a[1] * b[1] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ SI, AX
	ADCQ $0x00, DX
	ADDQ R11, AX
	ADCQ $0x00, DX
	MOVQ DX, R11
	MOVQ AX, SI
	MOVQ a_1+8(FP), AX
	MOVQ b_2+64(FP), BX

	// carry = ((registers[3] + a[1] * b[2] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[3] = (registers[3] + a[1] * b[2] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ DI, AX
	ADCQ $0x00, DX
	ADDQ R11, AX
	ADCQ $0x00, DX
	MOVQ DX, R11
	MOVQ AX, DI
	MOVQ a_1+8(FP), AX
	MOVQ b_3+72(FP), BX

	// carry = ((registers[4] + a[1] * b[3] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[4] = (registers[4] + a[1] * b[3] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R8, AX
	ADCQ $0x00, DX
	ADDQ R11, AX
	ADCQ $0x00, DX
	MOVQ DX, R11
	MOVQ AX, R8
	MOVQ a_1+8(FP), AX
	MOVQ b_4+80(FP), BX

	// carry = ((registers[5] + a[1] * b[4] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[5] = (registers[5] + a[1] * b[4] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R9, AX
	ADCQ $0x00, DX
	ADDQ R11, AX
	ADCQ $0x00, DX
	MOVQ DX, R11
	MOVQ AX, R9
	MOVQ a_1+8(FP), AX
	MOVQ b_5+88(FP), BX

	// carry = ((registers[6] + a[1] * b[5] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[6] = (registers[6] + a[1] * b[5] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R10, AX
	ADCQ $0x00, DX
	ADDQ R11, AX
	ADCQ $0x00, DX
	MOVQ DX, R11
	MOVQ AX, R10

	// registers[7] = carry
	MOVQ R11, R11

	// carry = 0
	XORQ R12, R12
	MOVQ a_2+16(FP), AX
	MOVQ b_0+48(FP), BX

	// carry = ((registers[2] + a[2] * b[0] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[2] = (registers[2] + a[2] * b[0] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ SI, AX
	ADCQ $0x00, DX
	ADDQ R12, AX
	ADCQ $0x00, DX
	MOVQ DX, R12
	MOVQ AX, SI
	MOVQ a_2+16(FP), AX
	MOVQ b_1+56(FP), BX

	// carry = ((registers[3] + a[2] * b[1] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[3] = (registers[3] + a[2] * b[1] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ DI, AX
	ADCQ $0x00, DX
	ADDQ R12, AX
	ADCQ $0x00, DX
	MOVQ DX, R12
	MOVQ AX, DI
	MOVQ a_2+16(FP), AX
	MOVQ b_2+64(FP), BX

	// carry = ((registers[4] + a[2] * b[2] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[4] = (registers[4] + a[2] * b[2] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R8, AX
	ADCQ $0x00, DX
	ADDQ R12, AX
	ADCQ $0x00, DX
	MOVQ DX, R12
	MOVQ AX, R8
	MOVQ a_2+16(FP), AX
	MOVQ b_3+72(FP), BX

	// carry = ((registers[5] + a[2] * b[3] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[5] = (registers[5] + a[2] * b[3] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R9, AX
	ADCQ $0x00, DX
	ADDQ R12, AX
	ADCQ $0x00, DX
	MOVQ DX, R12
	MOVQ AX, R9
	MOVQ a_2+16(FP), AX
	MOVQ b_4+80(FP), BX

	// carry = ((registers[6] + a[2] * b[4] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[6] = (registers[6] + a[2] * b[4] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R10, AX
	ADCQ $0x00, DX
	ADDQ R12, AX
	ADCQ $0x00, DX
	MOVQ DX, R12
	MOVQ AX, R10
	MOVQ a_2+16(FP), AX
	MOVQ b_5+88(FP), BX

	// carry = ((registers[7] + a[2] * b[5] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[7] = (registers[7] + a[2] * b[5] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R11, AX
	ADCQ $0x00, DX
	ADDQ R12, AX
	ADCQ $0x00, DX
	MOVQ DX, R12
	MOVQ AX, R11

	// registers[8] = carry
	MOVQ R12, R12

	// carry = 0
	XORQ R13, R13
	MOVQ a_3+24(FP), AX
	MOVQ b_0+48(FP), BX

	// carry = ((registers[3] + a[3] * b[0] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[3] = (registers[3] + a[3] * b[0] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ DI, AX
	ADCQ $0x00, DX
	ADDQ R13, AX
	ADCQ $0x00, DX
	MOVQ DX, R13
	MOVQ AX, DI
	MOVQ a_3+24(FP), AX
	MOVQ b_1+56(FP), BX

	// carry = ((registers[4] + a[3] * b[1] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[4] = (registers[4] + a[3] * b[1] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R8, AX
	ADCQ $0x00, DX
	ADDQ R13, AX
	ADCQ $0x00, DX
	MOVQ DX, R13
	MOVQ AX, R8
	MOVQ a_3+24(FP), AX
	MOVQ b_2+64(FP), BX

	// carry = ((registers[5] + a[3] * b[2] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[5] = (registers[5] + a[3] * b[2] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R9, AX
	ADCQ $0x00, DX
	ADDQ R13, AX
	ADCQ $0x00, DX
	MOVQ DX, R13
	MOVQ AX, R9
	MOVQ a_3+24(FP), AX
	MOVQ b_3+72(FP), BX

	// carry = ((registers[6] + a[3] * b[3] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[6] = (registers[6] + a[3] * b[3] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R10, AX
	ADCQ $0x00, DX
	ADDQ R13, AX
	ADCQ $0x00, DX
	MOVQ DX, R13
	MOVQ AX, R10
	MOVQ a_3+24(FP), AX
	MOVQ b_4+80(FP), BX

	// carry = ((registers[7] + a[3] * b[4] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[7] = (registers[7] + a[3] * b[4] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R11, AX
	ADCQ $0x00, DX
	ADDQ R13, AX
	ADCQ $0x00, DX
	MOVQ DX, R13
	MOVQ AX, R11
	MOVQ a_3+24(FP), AX
	MOVQ b_5+88(FP), BX

	// carry = ((registers[8] + a[3] * b[5] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[8] = (registers[8] + a[3] * b[5] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R12, AX
	ADCQ $0x00, DX
	ADDQ R13, AX
	ADCQ $0x00, DX
	MOVQ DX, R13
	MOVQ AX, R12

	// registers[9] = carry
	MOVQ R13, R13

	// carry = 0
	XORQ R14, R14
	MOVQ a_4+32(FP), AX
	MOVQ b_0+48(FP), BX

	// carry = ((registers[4] + a[4] * b[0] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[4] = (registers[4] + a[4] * b[0] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R8, AX
	ADCQ $0x00, DX
	ADDQ R14, AX
	ADCQ $0x00, DX
	MOVQ DX, R14
	MOVQ AX, R8
	MOVQ a_4+32(FP), AX
	MOVQ b_1+56(FP), BX

	// carry = ((registers[5] + a[4] * b[1] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[5] = (registers[5] + a[4] * b[1] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R9, AX
	ADCQ $0x00, DX
	ADDQ R14, AX
	ADCQ $0x00, DX
	MOVQ DX, R14
	MOVQ AX, R9
	MOVQ a_4+32(FP), AX
	MOVQ b_2+64(FP), BX

	// carry = ((registers[6] + a[4] * b[2] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[6] = (registers[6] + a[4] * b[2] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R10, AX
	ADCQ $0x00, DX
	ADDQ R14, AX
	ADCQ $0x00, DX
	MOVQ DX, R14
	MOVQ AX, R10
	MOVQ a_4+32(FP), AX
	MOVQ b_3+72(FP), BX

	// carry = ((registers[7] + a[4] * b[3] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[7] = (registers[7] + a[4] * b[3] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R11, AX
	ADCQ $0x00, DX
	ADDQ R14, AX
	ADCQ $0x00, DX
	MOVQ DX, R14
	MOVQ AX, R11
	MOVQ a_4+32(FP), AX
	MOVQ b_4+80(FP), BX

	// carry = ((registers[8] + a[4] * b[4] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[8] = (registers[8] + a[4] * b[4] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R12, AX
	ADCQ $0x00, DX
	ADDQ R14, AX
	ADCQ $0x00, DX
	MOVQ DX, R14
	MOVQ AX, R12
	MOVQ a_4+32(FP), AX
	MOVQ b_5+88(FP), BX

	// carry = ((registers[9] + a[4] * b[5] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[9] = (registers[9] + a[4] * b[5] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R13, AX
	ADCQ $0x00, DX
	ADDQ R14, AX
	ADCQ $0x00, DX
	MOVQ DX, R14
	MOVQ AX, R13

	// registers[10] = carry
	MOVQ R14, R14

	// carry = 0
	XORQ R15, R15
	MOVQ a_5+40(FP), AX
	MOVQ b_0+48(FP), BX

	// carry = ((registers[5] + a[5] * b[0] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[5] = (registers[5] + a[5] * b[0] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R9, AX
	ADCQ $0x00, DX
	ADDQ R15, AX
	ADCQ $0x00, DX
	MOVQ DX, R15
	MOVQ AX, R9
	MOVQ a_5+40(FP), AX
	MOVQ b_1+56(FP), BX

	// carry = ((registers[6] + a[5] * b[1] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[6] = (registers[6] + a[5] * b[1] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R10, AX
	ADCQ $0x00, DX
	ADDQ R15, AX
	ADCQ $0x00, DX
	MOVQ DX, R15
	MOVQ AX, R10
	MOVQ a_5+40(FP), AX
	MOVQ b_2+64(FP), BX

	// carry = ((registers[7] + a[5] * b[2] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[7] = (registers[7] + a[5] * b[2] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R11, AX
	ADCQ $0x00, DX
	ADDQ R15, AX
	ADCQ $0x00, DX
	MOVQ DX, R15
	MOVQ AX, R11
	MOVQ a_5+40(FP), AX
	MOVQ b_3+72(FP), BX

	// carry = ((registers[8] + a[5] * b[3] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[8] = (registers[8] + a[5] * b[3] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R12, AX
	ADCQ $0x00, DX
	ADDQ R15, AX
	ADCQ $0x00, DX
	MOVQ DX, R15
	MOVQ AX, R12
	MOVQ a_5+40(FP), AX
	MOVQ b_4+80(FP), BX

	// carry = ((registers[9] + a[5] * b[4] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[9] = (registers[9] + a[5] * b[4] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R13, AX
	ADCQ $0x00, DX
	ADDQ R15, AX
	ADCQ $0x00, DX
	MOVQ DX, R15
	MOVQ AX, R13
	MOVQ a_5+40(FP), AX
	MOVQ b_5+88(FP), BX

	// carry = ((registers[10] + a[5] * b[5] + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	// registers[10] = (registers[10] + a[5] * b[5] + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ AX, AX
	MULQ BX
	ADDQ R14, AX
	ADCQ $0x00, DX
	ADDQ R15, AX
	ADCQ $0x00, DX
	MOVQ DX, R15
	MOVQ AX, R14

	// registers[11] = carry
	MOVQ R15, AX

	// lo[0] = registers[0]
	MOVQ CX, lo_0+144(FP)

	// lo[1] = registers[1]
	MOVQ BP, lo_1+152(FP)

	// lo[2] = registers[2]
	MOVQ SI, lo_2+160(FP)

	// lo[3] = registers[3]
	MOVQ DI, lo_3+168(FP)

	// lo[4] = registers[4]
	MOVQ R8, lo_4+176(FP)

	// lo[5] = registers[5]
	MOVQ R9, lo_5+184(FP)

	// hi[0] = registers[6]
	MOVQ R10, hi_0+96(FP)

	// hi[1] = registers[7]
	MOVQ R11, hi_1+104(FP)

	// hi[2] = registers[8]
	MOVQ R12, hi_2+112(FP)

	// hi[3] = registers[9]
	MOVQ R13, hi_3+120(FP)

	// hi[4] = registers[10]
	MOVQ R14, hi_4+128(FP)

	// hi[5] = registers[11]
	MOVQ AX, hi_5+136(FP)
	RET

// func MontReduce(hi [6]uint64, lo [6]uint64) (out [6]uint64)
TEXT 路MontReduce(SB), $96-144
	// reg = [0] * 12
	// temp = r[0]
	MOVQ lo_0+48(FP), AX

	// reg[0] = temp
	MOVQ AX, (SP)

	// temp = r[1]
	MOVQ lo_1+56(FP), AX

	// reg[1] = temp
	MOVQ AX, 8(SP)

	// temp = r[2]
	MOVQ lo_2+64(FP), AX

	// reg[2] = temp
	MOVQ AX, 16(SP)

	// temp = r[3]
	MOVQ lo_3+72(FP), AX

	// reg[3] = temp
	MOVQ AX, 24(SP)

	// temp = r[4]
	MOVQ lo_4+80(FP), AX

	// reg[4] = temp
	MOVQ AX, 32(SP)

	// temp = r[5]
	MOVQ lo_5+88(FP), AX

	// reg[5] = temp
	MOVQ AX, 40(SP)

	// temp = r[6]
	MOVQ hi_0+0(FP), AX

	// reg[6] = temp
	MOVQ AX, 48(SP)

	// temp = r[7]
	MOVQ hi_1+8(FP), AX

	// reg[7] = temp
	MOVQ AX, 56(SP)

	// temp = r[8]
	MOVQ hi_2+16(FP), AX

	// reg[8] = temp
	MOVQ AX, 64(SP)

	// temp = r[9]
	MOVQ hi_3+24(FP), AX

	// reg[9] = temp
	MOVQ AX, 72(SP)

	// temp = r[10]
	MOVQ hi_4+32(FP), AX

	// reg[10] = temp
	MOVQ AX, 80(SP)

	// temp = r[11]
	MOVQ hi_5+40(FP), AX

	// reg[11] = temp
	MOVQ AX, 88(SP)

	// carryOver = 0
	XORQ CX, CX

	// rax = 9940570264628428797
	MOVQ $0x89f3fffcfffcfffd, AX

	// k = reg[0]
	MOVQ (SP), BP

	// rax = (rax * k) & 0xFFFFFFFFFFFFFFFF
	MULQ BP

	// k = rax
	MOVQ AX, BP

	// carry = 0
	XORQ SI, SI

	// carryTemp = ((reg[0] + QFieldModulus[0] * k + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	MOVQ (SP), DI
	MOVQ $0xb9feffffffffaaab, AX
	MULQ BP
	ADDQ DI, AX
	ADCQ $0x00, DX
	ADDQ SI, AX
	ADCQ $0x00, DX
	MOVQ DX, SI
	MOVQ AX, DI

	// carry = carryTemp
	// carryTemp = ((reg[1] + QFieldModulus[1] * k + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	MOVQ 8(SP), DI
	MOVQ $0x1eabfffeb153ffff, AX
	MULQ BP
	ADDQ DI, AX
	ADCQ $0x00, DX
	ADDQ SI, AX
	ADCQ $0x00, DX
	MOVQ DX, SI
	MOVQ AX, DI

	// reg[1] = (reg[1] + QFieldModulus[1] * k + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ DI, 8(SP)

	// carry = carryTemp
	// carryTemp = ((reg[2] + QFieldModulus[2] * k + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	MOVQ 16(SP), DI
	MOVQ $0x6730d2a0f6b0f624, AX
	MULQ BP
	ADDQ DI, AX
	ADCQ $0x00, DX
	ADDQ SI, AX
	ADCQ $0x00, DX
	MOVQ DX, SI
	MOVQ AX, DI

	// reg[2] = (reg[2] + QFieldModulus[2] * k + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ DI, 16(SP)

	// carry = carryTemp
	// carryTemp = ((reg[3] + QFieldModulus[3] * k + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	MOVQ 24(SP), DI
	MOVQ $0x64774b84f38512bf, AX
	MULQ BP
	ADDQ DI, AX
	ADCQ $0x00, DX
	ADDQ SI, AX
	ADCQ $0x00, DX
	MOVQ DX, SI
	MOVQ AX, DI

	// reg[3] = (reg[3] + QFieldModulus[3] * k + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ DI, 24(SP)

	// carry = carryTemp
	// carryTemp = ((reg[4] + QFieldModulus[4] * k + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	MOVQ 32(SP), DI
	MOVQ $0x4b1ba7b6434bacd7, AX
	MULQ BP
	ADDQ DI, AX
	ADCQ $0x00, DX
	ADDQ SI, AX
	ADCQ $0x00, DX
	MOVQ DX, SI
	MOVQ AX, DI

	// reg[4] = (reg[4] + QFieldModulus[4] * k + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ DI, 32(SP)

	// carry = carryTemp
	// carryTemp = ((reg[5] + QFieldModulus[5] * k + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	MOVQ 40(SP), DI
	MOVQ $0x1a0111ea397fe69a, AX
	MULQ BP
	ADDQ DI, AX
	ADCQ $0x00, DX
	ADDQ SI, AX
	ADCQ $0x00, DX
	MOVQ DX, SI
	MOVQ AX, DI

	// reg[5] = (reg[5] + QFieldModulus[5] * k + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ DI, 40(SP)

	// carry = carryTemp
	// newCarry = 0
	XORQ BX, BX

	// lastReg = reg[6]
	MOVQ 48(SP), AX

	// newCarry = ((lastReg + carry + carryOver) >> 64) & 0xFFFFFFFFFFFFFFFF
	// lastReg = (lastReg + carry + carryOver) & 0xFFFFFFFFFFFFFFFF
	ADDQ SI, AX
	ADCQ $0x00, BX
	ADDQ CX, AX
	ADCQ $0x00, BX

	// carryOver = newCarry
	MOVQ BX, CX

	// reg[6] = lastReg
	MOVQ AX, 48(SP)

	// rax = 9940570264628428797
	MOVQ $0x89f3fffcfffcfffd, AX

	// k = reg[1]
	MOVQ 8(SP), BP

	// rax = (rax * k) & 0xFFFFFFFFFFFFFFFF
	MULQ BP

	// k = rax
	MOVQ AX, BP

	// carry = 0
	XORQ SI, SI

	// carryTemp = ((reg[1] + QFieldModulus[0] * k + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	MOVQ 8(SP), DI
	MOVQ $0xb9feffffffffaaab, AX
	MULQ BP
	ADDQ DI, AX
	ADCQ $0x00, DX
	ADDQ SI, AX
	ADCQ $0x00, DX
	MOVQ DX, SI
	MOVQ AX, DI

	// carry = carryTemp
	// carryTemp = ((reg[2] + QFieldModulus[1] * k + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	MOVQ 16(SP), DI
	MOVQ $0x1eabfffeb153ffff, AX
	MULQ BP
	ADDQ DI, AX
	ADCQ $0x00, DX
	ADDQ SI, AX
	ADCQ $0x00, DX
	MOVQ DX, SI
	MOVQ AX, DI

	// reg[2] = (reg[2] + QFieldModulus[1] * k + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ DI, 16(SP)

	// carry = carryTemp
	// carryTemp = ((reg[3] + QFieldModulus[2] * k + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	MOVQ 24(SP), DI
	MOVQ $0x6730d2a0f6b0f624, AX
	MULQ BP
	ADDQ DI, AX
	ADCQ $0x00, DX
	ADDQ SI, AX
	ADCQ $0x00, DX
	MOVQ DX, SI
	MOVQ AX, DI

	// reg[3] = (reg[3] + QFieldModulus[2] * k + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ DI, 24(SP)

	// carry = carryTemp
	// carryTemp = ((reg[4] + QFieldModulus[3] * k + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	MOVQ 32(SP), DI
	MOVQ $0x64774b84f38512bf, AX
	MULQ BP
	ADDQ DI, AX
	ADCQ $0x00, DX
	ADDQ SI, AX
	ADCQ $0x00, DX
	MOVQ DX, SI
	MOVQ AX, DI

	// reg[4] = (reg[4] + QFieldModulus[3] * k + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ DI, 32(SP)

	// carry = carryTemp
	// carryTemp = ((reg[5] + QFieldModulus[4] * k + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	MOVQ 40(SP), DI
	MOVQ $0x4b1ba7b6434bacd7, AX
	MULQ BP
	ADDQ DI, AX
	ADCQ $0x00, DX
	ADDQ SI, AX
	ADCQ $0x00, DX
	MOVQ DX, SI
	MOVQ AX, DI

	// reg[5] = (reg[5] + QFieldModulus[4] * k + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ DI, 40(SP)

	// carry = carryTemp
	// carryTemp = ((reg[6] + QFieldModulus[5] * k + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	MOVQ 48(SP), DI
	MOVQ $0x1a0111ea397fe69a, AX
	MULQ BP
	ADDQ DI, AX
	ADCQ $0x00, DX
	ADDQ SI, AX
	ADCQ $0x00, DX
	MOVQ DX, SI
	MOVQ AX, DI

	// reg[6] = (reg[6] + QFieldModulus[5] * k + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ DI, 48(SP)

	// carry = carryTemp
	// newCarry = 0
	XORQ BX, BX

	// lastReg = reg[7]
	MOVQ 56(SP), AX

	// newCarry = ((lastReg + carry + carryOver) >> 64) & 0xFFFFFFFFFFFFFFFF
	// lastReg = (lastReg + carry + carryOver) & 0xFFFFFFFFFFFFFFFF
	ADDQ SI, AX
	ADCQ $0x00, BX
	ADDQ CX, AX
	ADCQ $0x00, BX

	// carryOver = newCarry
	MOVQ BX, CX

	// reg[7] = lastReg
	MOVQ AX, 56(SP)

	// rax = 9940570264628428797
	MOVQ $0x89f3fffcfffcfffd, AX

	// k = reg[2]
	MOVQ 16(SP), BP

	// rax = (rax * k) & 0xFFFFFFFFFFFFFFFF
	MULQ BP

	// k = rax
	MOVQ AX, BP

	// carry = 0
	XORQ SI, SI

	// carryTemp = ((reg[2] + QFieldModulus[0] * k + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	MOVQ 16(SP), DI
	MOVQ $0xb9feffffffffaaab, AX
	MULQ BP
	ADDQ DI, AX
	ADCQ $0x00, DX
	ADDQ SI, AX
	ADCQ $0x00, DX
	MOVQ DX, SI
	MOVQ AX, DI

	// carry = carryTemp
	// carryTemp = ((reg[3] + QFieldModulus[1] * k + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	MOVQ 24(SP), DI
	MOVQ $0x1eabfffeb153ffff, AX
	MULQ BP
	ADDQ DI, AX
	ADCQ $0x00, DX
	ADDQ SI, AX
	ADCQ $0x00, DX
	MOVQ DX, SI
	MOVQ AX, DI

	// reg[3] = (reg[3] + QFieldModulus[1] * k + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ DI, 24(SP)

	// carry = carryTemp
	// carryTemp = ((reg[4] + QFieldModulus[2] * k + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	MOVQ 32(SP), DI
	MOVQ $0x6730d2a0f6b0f624, AX
	MULQ BP
	ADDQ DI, AX
	ADCQ $0x00, DX
	ADDQ SI, AX
	ADCQ $0x00, DX
	MOVQ DX, SI
	MOVQ AX, DI

	// reg[4] = (reg[4] + QFieldModulus[2] * k + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ DI, 32(SP)

	// carry = carryTemp
	// carryTemp = ((reg[5] + QFieldModulus[3] * k + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	MOVQ 40(SP), DI
	MOVQ $0x64774b84f38512bf, AX
	MULQ BP
	ADDQ DI, AX
	ADCQ $0x00, DX
	ADDQ SI, AX
	ADCQ $0x00, DX
	MOVQ DX, SI
	MOVQ AX, DI

	// reg[5] = (reg[5] + QFieldModulus[3] * k + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ DI, 40(SP)

	// carry = carryTemp
	// carryTemp = ((reg[6] + QFieldModulus[4] * k + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	MOVQ 48(SP), DI
	MOVQ $0x4b1ba7b6434bacd7, AX
	MULQ BP
	ADDQ DI, AX
	ADCQ $0x00, DX
	ADDQ SI, AX
	ADCQ $0x00, DX
	MOVQ DX, SI
	MOVQ AX, DI

	// reg[6] = (reg[6] + QFieldModulus[4] * k + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ DI, 48(SP)

	// carry = carryTemp
	// carryTemp = ((reg[7] + QFieldModulus[5] * k + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	MOVQ 56(SP), DI
	MOVQ $0x1a0111ea397fe69a, AX
	MULQ BP
	ADDQ DI, AX
	ADCQ $0x00, DX
	ADDQ SI, AX
	ADCQ $0x00, DX
	MOVQ DX, SI
	MOVQ AX, DI

	// reg[7] = (reg[7] + QFieldModulus[5] * k + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ DI, 56(SP)

	// carry = carryTemp
	// newCarry = 0
	XORQ BX, BX

	// lastReg = reg[8]
	MOVQ 64(SP), AX

	// newCarry = ((lastReg + carry + carryOver) >> 64) & 0xFFFFFFFFFFFFFFFF
	// lastReg = (lastReg + carry + carryOver) & 0xFFFFFFFFFFFFFFFF
	ADDQ SI, AX
	ADCQ $0x00, BX
	ADDQ CX, AX
	ADCQ $0x00, BX

	// carryOver = newCarry
	MOVQ BX, CX

	// reg[8] = lastReg
	MOVQ AX, 64(SP)

	// rax = 9940570264628428797
	MOVQ $0x89f3fffcfffcfffd, AX

	// k = reg[3]
	MOVQ 24(SP), BP

	// rax = (rax * k) & 0xFFFFFFFFFFFFFFFF
	MULQ BP

	// k = rax
	MOVQ AX, BP

	// carry = 0
	XORQ SI, SI

	// carryTemp = ((reg[3] + QFieldModulus[0] * k + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	MOVQ 24(SP), DI
	MOVQ $0xb9feffffffffaaab, AX
	MULQ BP
	ADDQ DI, AX
	ADCQ $0x00, DX
	ADDQ SI, AX
	ADCQ $0x00, DX
	MOVQ DX, SI
	MOVQ AX, DI

	// carry = carryTemp
	// carryTemp = ((reg[4] + QFieldModulus[1] * k + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	MOVQ 32(SP), DI
	MOVQ $0x1eabfffeb153ffff, AX
	MULQ BP
	ADDQ DI, AX
	ADCQ $0x00, DX
	ADDQ SI, AX
	ADCQ $0x00, DX
	MOVQ DX, SI
	MOVQ AX, DI

	// reg[4] = (reg[4] + QFieldModulus[1] * k + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ DI, 32(SP)

	// carry = carryTemp
	// carryTemp = ((reg[5] + QFieldModulus[2] * k + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	MOVQ 40(SP), DI
	MOVQ $0x6730d2a0f6b0f624, AX
	MULQ BP
	ADDQ DI, AX
	ADCQ $0x00, DX
	ADDQ SI, AX
	ADCQ $0x00, DX
	MOVQ DX, SI
	MOVQ AX, DI

	// reg[5] = (reg[5] + QFieldModulus[2] * k + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ DI, 40(SP)

	// carry = carryTemp
	// carryTemp = ((reg[6] + QFieldModulus[3] * k + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	MOVQ 48(SP), DI
	MOVQ $0x64774b84f38512bf, AX
	MULQ BP
	ADDQ DI, AX
	ADCQ $0x00, DX
	ADDQ SI, AX
	ADCQ $0x00, DX
	MOVQ DX, SI
	MOVQ AX, DI

	// reg[6] = (reg[6] + QFieldModulus[3] * k + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ DI, 48(SP)

	// carry = carryTemp
	// carryTemp = ((reg[7] + QFieldModulus[4] * k + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	MOVQ 56(SP), DI
	MOVQ $0x4b1ba7b6434bacd7, AX
	MULQ BP
	ADDQ DI, AX
	ADCQ $0x00, DX
	ADDQ SI, AX
	ADCQ $0x00, DX
	MOVQ DX, SI
	MOVQ AX, DI

	// reg[7] = (reg[7] + QFieldModulus[4] * k + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ DI, 56(SP)

	// carry = carryTemp
	// carryTemp = ((reg[8] + QFieldModulus[5] * k + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	MOVQ 64(SP), DI
	MOVQ $0x1a0111ea397fe69a, AX
	MULQ BP
	ADDQ DI, AX
	ADCQ $0x00, DX
	ADDQ SI, AX
	ADCQ $0x00, DX
	MOVQ DX, SI
	MOVQ AX, DI

	// reg[8] = (reg[8] + QFieldModulus[5] * k + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ DI, 64(SP)

	// carry = carryTemp
	// newCarry = 0
	XORQ BX, BX

	// lastReg = reg[9]
	MOVQ 72(SP), AX

	// newCarry = ((lastReg + carry + carryOver) >> 64) & 0xFFFFFFFFFFFFFFFF
	// lastReg = (lastReg + carry + carryOver) & 0xFFFFFFFFFFFFFFFF
	ADDQ SI, AX
	ADCQ $0x00, BX
	ADDQ CX, AX
	ADCQ $0x00, BX

	// carryOver = newCarry
	MOVQ BX, CX

	// reg[9] = lastReg
	MOVQ AX, 72(SP)

	// rax = 9940570264628428797
	MOVQ $0x89f3fffcfffcfffd, AX

	// k = reg[4]
	MOVQ 32(SP), BP

	// rax = (rax * k) & 0xFFFFFFFFFFFFFFFF
	MULQ BP

	// k = rax
	MOVQ AX, BP

	// carry = 0
	XORQ SI, SI

	// carryTemp = ((reg[4] + QFieldModulus[0] * k + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	MOVQ 32(SP), DI
	MOVQ $0xb9feffffffffaaab, AX
	MULQ BP
	ADDQ DI, AX
	ADCQ $0x00, DX
	ADDQ SI, AX
	ADCQ $0x00, DX
	MOVQ DX, SI
	MOVQ AX, DI

	// carry = carryTemp
	// carryTemp = ((reg[5] + QFieldModulus[1] * k + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	MOVQ 40(SP), DI
	MOVQ $0x1eabfffeb153ffff, AX
	MULQ BP
	ADDQ DI, AX
	ADCQ $0x00, DX
	ADDQ SI, AX
	ADCQ $0x00, DX
	MOVQ DX, SI
	MOVQ AX, DI

	// reg[5] = (reg[5] + QFieldModulus[1] * k + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ DI, 40(SP)

	// carry = carryTemp
	// carryTemp = ((reg[6] + QFieldModulus[2] * k + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	MOVQ 48(SP), DI
	MOVQ $0x6730d2a0f6b0f624, AX
	MULQ BP
	ADDQ DI, AX
	ADCQ $0x00, DX
	ADDQ SI, AX
	ADCQ $0x00, DX
	MOVQ DX, SI
	MOVQ AX, DI

	// reg[6] = (reg[6] + QFieldModulus[2] * k + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ DI, 48(SP)

	// carry = carryTemp
	// carryTemp = ((reg[7] + QFieldModulus[3] * k + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	MOVQ 56(SP), DI
	MOVQ $0x64774b84f38512bf, AX
	MULQ BP
	ADDQ DI, AX
	ADCQ $0x00, DX
	ADDQ SI, AX
	ADCQ $0x00, DX
	MOVQ DX, SI
	MOVQ AX, DI

	// reg[7] = (reg[7] + QFieldModulus[3] * k + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ DI, 56(SP)

	// carry = carryTemp
	// carryTemp = ((reg[8] + QFieldModulus[4] * k + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	MOVQ 64(SP), DI
	MOVQ $0x4b1ba7b6434bacd7, AX
	MULQ BP
	ADDQ DI, AX
	ADCQ $0x00, DX
	ADDQ SI, AX
	ADCQ $0x00, DX
	MOVQ DX, SI
	MOVQ AX, DI

	// reg[8] = (reg[8] + QFieldModulus[4] * k + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ DI, 64(SP)

	// carry = carryTemp
	// carryTemp = ((reg[9] + QFieldModulus[5] * k + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	MOVQ 72(SP), DI
	MOVQ $0x1a0111ea397fe69a, AX
	MULQ BP
	ADDQ DI, AX
	ADCQ $0x00, DX
	ADDQ SI, AX
	ADCQ $0x00, DX
	MOVQ DX, SI
	MOVQ AX, DI

	// reg[9] = (reg[9] + QFieldModulus[5] * k + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ DI, 72(SP)

	// carry = carryTemp
	// newCarry = 0
	XORQ BX, BX

	// lastReg = reg[10]
	MOVQ 80(SP), AX

	// newCarry = ((lastReg + carry + carryOver) >> 64) & 0xFFFFFFFFFFFFFFFF
	// lastReg = (lastReg + carry + carryOver) & 0xFFFFFFFFFFFFFFFF
	ADDQ SI, AX
	ADCQ $0x00, BX
	ADDQ CX, AX
	ADCQ $0x00, BX

	// carryOver = newCarry
	MOVQ BX, CX

	// reg[10] = lastReg
	MOVQ AX, 80(SP)

	// rax = 9940570264628428797
	MOVQ $0x89f3fffcfffcfffd, AX

	// k = reg[5]
	MOVQ 40(SP), BP

	// rax = (rax * k) & 0xFFFFFFFFFFFFFFFF
	MULQ BP

	// k = rax
	MOVQ AX, BP

	// carry = 0
	XORQ SI, SI

	// carryTemp = ((reg[5] + QFieldModulus[0] * k + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	MOVQ 40(SP), DI
	MOVQ $0xb9feffffffffaaab, AX
	MULQ BP
	ADDQ DI, AX
	ADCQ $0x00, DX
	ADDQ SI, AX
	ADCQ $0x00, DX
	MOVQ DX, SI
	MOVQ AX, DI

	// carry = carryTemp
	// carryTemp = ((reg[6] + QFieldModulus[1] * k + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	MOVQ 48(SP), DI
	MOVQ $0x1eabfffeb153ffff, AX
	MULQ BP
	ADDQ DI, AX
	ADCQ $0x00, DX
	ADDQ SI, AX
	ADCQ $0x00, DX
	MOVQ DX, SI
	MOVQ AX, DI

	// reg[6] = (reg[6] + QFieldModulus[1] * k + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ DI, 48(SP)

	// carry = carryTemp
	// carryTemp = ((reg[7] + QFieldModulus[2] * k + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	MOVQ 56(SP), DI
	MOVQ $0x6730d2a0f6b0f624, AX
	MULQ BP
	ADDQ DI, AX
	ADCQ $0x00, DX
	ADDQ SI, AX
	ADCQ $0x00, DX
	MOVQ DX, SI
	MOVQ AX, DI

	// reg[7] = (reg[7] + QFieldModulus[2] * k + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ DI, 56(SP)

	// carry = carryTemp
	// carryTemp = ((reg[8] + QFieldModulus[3] * k + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	MOVQ 64(SP), DI
	MOVQ $0x64774b84f38512bf, AX
	MULQ BP
	ADDQ DI, AX
	ADCQ $0x00, DX
	ADDQ SI, AX
	ADCQ $0x00, DX
	MOVQ DX, SI
	MOVQ AX, DI

	// reg[8] = (reg[8] + QFieldModulus[3] * k + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ DI, 64(SP)

	// carry = carryTemp
	// carryTemp = ((reg[9] + QFieldModulus[4] * k + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	MOVQ 72(SP), DI
	MOVQ $0x4b1ba7b6434bacd7, AX
	MULQ BP
	ADDQ DI, AX
	ADCQ $0x00, DX
	ADDQ SI, AX
	ADCQ $0x00, DX
	MOVQ DX, SI
	MOVQ AX, DI

	// reg[9] = (reg[9] + QFieldModulus[4] * k + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ DI, 72(SP)

	// carry = carryTemp
	// carryTemp = ((reg[10] + QFieldModulus[5] * k + carry) >> 64) & 0xFFFFFFFFFFFFFFFF
	MOVQ 80(SP), DI
	MOVQ $0x1a0111ea397fe69a, AX
	MULQ BP
	ADDQ DI, AX
	ADCQ $0x00, DX
	ADDQ SI, AX
	ADCQ $0x00, DX
	MOVQ DX, SI
	MOVQ AX, DI

	// reg[10] = (reg[10] + QFieldModulus[5] * k + carry) & 0xFFFFFFFFFFFFFFFF
	MOVQ DI, 80(SP)

	// carry = carryTemp
	// newCarry = 0
	XORQ BX, BX

	// lastReg = reg[11]
	MOVQ 88(SP), AX

	// newCarry = ((lastReg + carry + carryOver) >> 64) & 0xFFFFFFFFFFFFFFFF
	// lastReg = (lastReg + carry + carryOver) & 0xFFFFFFFFFFFFFFFF
	ADDQ SI, AX
	ADCQ $0x00, BX
	ADDQ CX, AX
	ADCQ $0x00, BX

	// carryOver = newCarry
	MOVQ BX, CX

	// reg[11] = lastReg
	MOVQ AX, 88(SP)
	MOVQ 48(SP), AX

	// out[0] = reg[6]
	MOVQ AX, out_0+96(FP)
	MOVQ 56(SP), AX

	// out[1] = reg[7]
	MOVQ AX, out_1+104(FP)
	MOVQ 64(SP), AX

	// out[2] = reg[8]
	MOVQ AX, out_2+112(FP)
	MOVQ 72(SP), AX

	// out[3] = reg[9]
	MOVQ AX, out_3+120(FP)
	MOVQ 80(SP), AX

	// out[4] = reg[10]
	MOVQ AX, out_4+128(FP)
	MOVQ 88(SP), AX

	// out[5] = reg[11]
	MOVQ AX, out_5+136(FP)
	RET

// func AddNoCarry(a [6]uint64, b [6]uint64) [6]uint64
TEXT 路AddNoCarry(SB), $0-144
	MOVQ a_0+0(FP), AX
	MOVQ b_0+48(FP), CX
	MOVQ a_1+8(FP), DX
	MOVQ b_1+56(FP), BX
	MOVQ a_2+16(FP), BP
	MOVQ b_2+64(FP), SI
	MOVQ a_3+24(FP), DI
	MOVQ b_3+72(FP), R8
	MOVQ a_4+32(FP), R9
	MOVQ b_4+80(FP), R10
	MOVQ a_5+40(FP), R11
	MOVQ b_5+88(FP), R12
	ADDQ AX, CX
	ADCQ DX, BX
	ADCQ BP, SI
	ADCQ DI, R8
	ADCQ R9, R10
	ADCQ R11, R12
	MOVQ CX, ret_0+96(FP)
	MOVQ BX, ret_1+104(FP)
	MOVQ SI, ret_2+112(FP)
	MOVQ R8, ret_3+120(FP)
	MOVQ R10, ret_4+128(FP)
	MOVQ R12, ret_5+136(FP)
	RET

// func SubNoBorrow(a [6]uint64, b [6]uint64) [6]uint64
TEXT 路SubNoBorrow(SB), $0-144
	MOVQ a_0+0(FP), AX
	MOVQ b_0+48(FP), CX
	MOVQ a_1+8(FP), DX
	MOVQ b_1+56(FP), BX
	MOVQ a_2+16(FP), BP
	MOVQ b_2+64(FP), SI
	MOVQ a_3+24(FP), DI
	MOVQ b_3+72(FP), R8
	MOVQ a_4+32(FP), R9
	MOVQ b_4+80(FP), R10
	MOVQ a_5+40(FP), R11
	MOVQ b_5+88(FP), R12
	SUBQ CX, AX
	SBBQ BX, DX
	SBBQ SI, BP
	SBBQ R8, DI
	SBBQ R10, R9
	SBBQ R12, R11
	MOVQ AX, ret_0+96(FP)
	MOVQ DX, ret_1+104(FP)
	MOVQ BP, ret_2+112(FP)
	MOVQ DI, ret_3+120(FP)
	MOVQ R9, ret_4+128(FP)
	MOVQ R11, ret_5+136(FP)
	RET
